name: Build and Release Modpack

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version number for this release"
        required: true
        default: "0.1.0"

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ">=1.19.0"
          cache: false

      - name: Install Packwiz
        run: |
          go install github.com/packwiz/packwiz@latest
          echo "Verifying packwiz installation:"
          packwiz --help | head -n 3

      - name: Set release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            echo "VERSION=${VERSION#v}" >> $GITHUB_ENV
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          else
            # Use current date and short commit hash for dev builds
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            VERSION="$(date +'%Y%m%d')-${SHORT_SHA}"
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          fi

      - name: Generate Mods List
        id: mods_list
        run: |
          echo "Generating list of all mods in this release..."

          # Create a mods list file
          echo "# Mods in Friends Modpack v${{ env.VERSION }}" > mods_list.txt
          echo "" >> mods_list.txt
          echo "This release includes the following mods:" >> mods_list.txt
          echo "" >> mods_list.txt

          # Parse all mod toml files and extract mod names
          MOD_COUNT=0
          for MOD_FILE in mods/*.pw.toml; do
            # Extract mod name from the file
            MOD_NAME=$(grep -m 1 "^name" "$MOD_FILE" | cut -d'"' -f2 | sed 's/^name = //')
            
            if [ -z "$MOD_NAME" ]; then
              # If name extraction failed, use filename without extension as fallback
              MOD_NAME=$(basename "$MOD_FILE" .pw.toml)
            fi
            
            # Append to mods list
            echo "- $MOD_NAME" >> mods_list.txt
            MOD_COUNT=$((MOD_COUNT+1))
          done

          # Add summary
          echo "" >> mods_list.txt
          echo "Total: $MOD_COUNT mods" >> mods_list.txt

          echo "Mods list generated:"
          cat mods_list.txt

          # Store just the mod count for the release notes
          echo "MOD_COUNT=$MOD_COUNT" >> $GITHUB_ENV

      - name: Create CurseForge Modpack
        run: |
          echo "Creating CurseForge compatible modpack..."

          # Refresh packwiz index to ensure all mods are included
          echo "Refreshing packwiz index..."
          packwiz refresh

          # List all mods in the modpack
          echo "Mods in the modpack:"
          ls -la mods/

          # Create modpack structure
          mkdir -p modpack_temp/overrides
          cp -r mods modpack_temp/overrides/
          cp pack.toml modpack_temp/overrides/
          cp index.toml modpack_temp/overrides/
          cp mods_list.txt modpack_temp/

          # Start creating the manifest.json file
          cat > modpack_temp/manifest.json << EOF
          {
            "minecraft": {
              "version": "1.21.1",
              "modLoaders": [
                {
                  "id": "neoforge-21.1.147",
                  "primary": true
                }
              ]
            },
            "manifestType": "minecraftModpack",
            "manifestVersion": 1,
            "name": "Friends Modpack",
            "version": "${{ env.VERSION }}",
            "author": "filipjaruska",
            "files": [
          EOF

          # Parse all mod toml files and extract CurseForge IDs
          echo "Extracting CurseForge mod IDs from TOML files..."
          FIRST_MOD=true
          for MOD_FILE in mods/*.pw.toml; do
            if grep -q "mode = \"metadata:curseforge\"" "$MOD_FILE"; then
              PROJECT_ID=$(grep -oP 'project-id\s*=\s*\K\d+' "$MOD_FILE")
              FILE_ID=$(grep -oP 'file-id\s*=\s*\K\d+' "$MOD_FILE")
              
              if [ ! -z "$PROJECT_ID" ] && [ ! -z "$FILE_ID" ]; then
                echo "Found CurseForge mod: Project ID: $PROJECT_ID, File ID: $FILE_ID in $MOD_FILE"
                
                # Add comma for all mods except the first one
                if [ "$FIRST_MOD" = true ]; then
                  FIRST_MOD=false
                else
                  echo "," >> modpack_temp/manifest.json
                fi
                
                # Add the mod to manifest.json
                cat >> modpack_temp/manifest.json << EOF
              {
                "projectID": $PROJECT_ID,
                "fileID": $FILE_ID,
                "required": true
              }
          EOF
              fi
            else
              echo "Warning: $MOD_FILE is not a CurseForge mod, it will be included in overrides"
            fi
          done

          # Close the JSON structure
          cat >> modpack_temp/manifest.json << EOF
            ]
          }
          EOF

          echo "Manifest.json content:"
          cat modpack_temp/manifest.json

          # Create modpack ZIP
          cd modpack_temp
          zip -r ../FriendsModpack-${{ env.VERSION }}.zip *
          cd ..

          echo "Modpack ZIP file created:"
          ls -la FriendsModpack-${{ env.VERSION }}.zip

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Friends Modpack v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Friends Modpack v${{ env.VERSION }}
            
            ### Installation
            1. Download the CurseForge App from https://www.curseforge.com/download/app
            2. Click "Create Custom Profile" â†’ "Import"
            3. Select the downloaded ZIP file
            
            ### Full Changelog
            https://github.com/filipjaruska/minecraft-mods/commits/v${{ env.VERSION }}
            
            ### Mods
            This modpack contains ${{ env.MOD_COUNT }} mods. See the attached mods_list.txt for the complete list.
          files: |
            FriendsModpack-${{ env.VERSION }}.zip
            mods_list.txt
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
